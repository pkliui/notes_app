# Welcome to the Notes App tutorial

# Front end part

## Create a Node.js project and install dependencies

- Install  Node.js and npm as described here https://docs.npmjs.com/downloading-and-installing-node-js-and-npm

- Make a new directory e.g. notes-app, cd to there and initialize a Note.js app

```
npx create-react-app notesapp-ui --template typescript
```

- Write UI code

- To start the front-end development server:

```
npm start
```

- If all goes well, your browser will automatically open and display your new React app. 


# Back end part

## Install dependencies and initialise a typescript project

1. Enter the notesapp-server directory and run the following commands:

- npm init: Initializes a new npm module and gives you access to npm packages.
```
npm init
```

- npm i ... --save-dev: Installs development dependencies like TypeScript and type definitions.
```
npm i ts-node typescript nodemon @types/cors @types/express @types/node --save-dev
```

- npm i ...: Installs production dependencies like Express and Prisma.
```
npm i @prisma/client cors express prisma
```


- npx tsc --init will initialize typescript in our project. This will create a package.json script that we edit in order to start our server. 

```
npx tsc --init
```


2. I have got this tsconfig file at first:
```
{
  "compilerOptions": {
    "target": "es2016",                                  /* Set the JavaScript language version for emitted JavaScript and include compatible library declarations. */
    "module": "commonjs",                                /* Specify what module code is generated. */
    "esModuleInterop": true,                             /* Emit additional JavaScript to ease support for importing CommonJS modules. This enables 'allowSyntheticDefaultImports' for type compatibility. */
    "forceConsistentCasingInFileNames": true,            /* Ensure that casing is correct in imports. */
    "strict": true,                                      /* Enable all strict type-checking options. */
    "skipLibCheck": true                                 /* Skip type checking all .d.ts files. */
  }
}
```


## Set up Prisma

- make a new src/index.ts file under notesapp-server
- initiaize prisma

```
npx prisma init
```

You will see the instructions:


Next steps:
1. Set the DATABASE_URL in the .env file to point to your existing database. If your database has no tables yet, read https://pris.ly/d/getting-started
2. Set the provider of the datasource block in schema.prisma to match your database: postgresql, mysql, sqlite, sqlserver, mongodb or cockroachdb.

```
generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Note{
  id      Int @id @default(autoincrement())
  title   String
  content String
}
```

3. Run prisma db pull to turn your database schema into a Prisma schema.
4. Run prisma generate to generate the Prisma Client. You can then start querying your database.
5. Tip: Explore how you can extend the ORM with scalable connection pooling, global caching, and real-time database events. Read: https://pris.ly/cli/beyond-orm



 - To start the server on the port we specified in app.listen , run:

```
npx nodemon
```




## Dockerise



## Deploy on EC2 

.env permissions 
sudo chmod 6000 /etc/app.env
sudo chown ubuntu:ubuntu /etc/app.env